// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodecom.proto

#include "nodecom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace nodecom {
class SubmitNonceReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNonceReply>
      _instance;
} _SubmitNonceReply_default_instance_;
class SubmitNonceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNonceRequest>
      _instance;
} _SubmitNonceRequest_default_instance_;
}  // namespace nodecom
namespace protobuf_nodecom_2eproto {
void InitDefaultsSubmitNonceReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nodecom::_SubmitNonceReply_default_instance_;
    new (ptr) ::nodecom::SubmitNonceReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nodecom::SubmitNonceReply::InitAsDefaultInstance();
}

void InitDefaultsSubmitNonceReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubmitNonceReplyImpl);
}

void InitDefaultsSubmitNonceRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nodecom::_SubmitNonceRequest_default_instance_;
    new (ptr) ::nodecom::SubmitNonceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nodecom::SubmitNonceRequest::InitAsDefaultInstance();
}

void InitDefaultsSubmitNonceRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubmitNonceRequestImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nodecom::SubmitNonceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nodecom::SubmitNonceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nodecom::SubmitNonceRequest, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nodecom::SubmitNonceRequest, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nodecom::SubmitNonceRequest, deadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nodecom::SubmitNonceRequest, blockheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nodecom::SubmitNonceRequest, secret_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nodecom::SubmitNonceReply)},
  { 5, -1, sizeof(::nodecom::SubmitNonceRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nodecom::_SubmitNonceReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nodecom::_SubmitNonceRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "nodecom.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rnodecom.proto\022\007nodecom\"\022\n\020SubmitNonceR"
      "eply\"m\n\022SubmitNonceRequest\022\021\n\taccountID\030"
      "\001 \001(\004\022\r\n\005nonce\030\002 \001(\004\022\020\n\010deadline\030\003 \001(\004\022\023"
      "\n\013blockHeight\030\004 \001(\004\022\016\n\006secret\030\005 \001(\t2R\n\007N"
      "odeCom\022G\n\013SubmitNonce\022\033.nodecom.SubmitNo"
      "nceRequest\032\031.nodecom.SubmitNonceReply\"\000b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nodecom.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_nodecom_2eproto
namespace nodecom {

// ===================================================================

void SubmitNonceReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNonceReply::SubmitNonceReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_nodecom_2eproto::InitDefaultsSubmitNonceReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nodecom.SubmitNonceReply)
}
SubmitNonceReply::SubmitNonceReply(const SubmitNonceReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nodecom.SubmitNonceReply)
}

void SubmitNonceReply::SharedCtor() {
  _cached_size_ = 0;
}

SubmitNonceReply::~SubmitNonceReply() {
  // @@protoc_insertion_point(destructor:nodecom.SubmitNonceReply)
  SharedDtor();
}

void SubmitNonceReply::SharedDtor() {
}

void SubmitNonceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitNonceReply::descriptor() {
  ::protobuf_nodecom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nodecom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNonceReply& SubmitNonceReply::default_instance() {
  ::protobuf_nodecom_2eproto::InitDefaultsSubmitNonceReply();
  return *internal_default_instance();
}

SubmitNonceReply* SubmitNonceReply::New(::google::protobuf::Arena* arena) const {
  SubmitNonceReply* n = new SubmitNonceReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmitNonceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:nodecom.SubmitNonceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SubmitNonceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nodecom.SubmitNonceReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:nodecom.SubmitNonceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nodecom.SubmitNonceReply)
  return false;
#undef DO_
}

void SubmitNonceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nodecom.SubmitNonceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nodecom.SubmitNonceReply)
}

::google::protobuf::uint8* SubmitNonceReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nodecom.SubmitNonceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nodecom.SubmitNonceReply)
  return target;
}

size_t SubmitNonceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nodecom.SubmitNonceReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitNonceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nodecom.SubmitNonceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNonceReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNonceReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nodecom.SubmitNonceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nodecom.SubmitNonceReply)
    MergeFrom(*source);
  }
}

void SubmitNonceReply::MergeFrom(const SubmitNonceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nodecom.SubmitNonceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubmitNonceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nodecom.SubmitNonceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNonceReply::CopyFrom(const SubmitNonceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nodecom.SubmitNonceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNonceReply::IsInitialized() const {
  return true;
}

void SubmitNonceReply::Swap(SubmitNonceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNonceReply::InternalSwap(SubmitNonceReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmitNonceReply::GetMetadata() const {
  protobuf_nodecom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nodecom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNonceRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNonceRequest::kAccountIDFieldNumber;
const int SubmitNonceRequest::kNonceFieldNumber;
const int SubmitNonceRequest::kDeadlineFieldNumber;
const int SubmitNonceRequest::kBlockHeightFieldNumber;
const int SubmitNonceRequest::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNonceRequest::SubmitNonceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_nodecom_2eproto::InitDefaultsSubmitNonceRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nodecom.SubmitNonceRequest)
}
SubmitNonceRequest::SubmitNonceRequest(const SubmitNonceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret().size() > 0) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockheight_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(blockheight_));
  // @@protoc_insertion_point(copy_constructor:nodecom.SubmitNonceRequest)
}

void SubmitNonceRequest::SharedCtor() {
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(blockheight_));
  _cached_size_ = 0;
}

SubmitNonceRequest::~SubmitNonceRequest() {
  // @@protoc_insertion_point(destructor:nodecom.SubmitNonceRequest)
  SharedDtor();
}

void SubmitNonceRequest::SharedDtor() {
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNonceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitNonceRequest::descriptor() {
  ::protobuf_nodecom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nodecom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNonceRequest& SubmitNonceRequest::default_instance() {
  ::protobuf_nodecom_2eproto::InitDefaultsSubmitNonceRequest();
  return *internal_default_instance();
}

SubmitNonceRequest* SubmitNonceRequest::New(::google::protobuf::Arena* arena) const {
  SubmitNonceRequest* n = new SubmitNonceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmitNonceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nodecom.SubmitNonceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(blockheight_));
  _internal_metadata_.Clear();
}

bool SubmitNonceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nodecom.SubmitNonceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 accountID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nonce = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 deadline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 blockHeight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blockheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secret = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secret().data(), static_cast<int>(this->secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nodecom.SubmitNonceRequest.secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nodecom.SubmitNonceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nodecom.SubmitNonceRequest)
  return false;
#undef DO_
}

void SubmitNonceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nodecom.SubmitNonceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce(), output);
  }

  // uint64 deadline = 3;
  if (this->deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->deadline(), output);
  }

  // uint64 blockHeight = 4;
  if (this->blockheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->blockheight(), output);
  }

  // string secret = 5;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodecom.SubmitNonceRequest.secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->secret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nodecom.SubmitNonceRequest)
}

::google::protobuf::uint8* SubmitNonceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nodecom.SubmitNonceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce(), target);
  }

  // uint64 deadline = 3;
  if (this->deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->deadline(), target);
  }

  // uint64 blockHeight = 4;
  if (this->blockheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->blockheight(), target);
  }

  // string secret = 5;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodecom.SubmitNonceRequest.secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->secret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nodecom.SubmitNonceRequest)
  return target;
}

size_t SubmitNonceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nodecom.SubmitNonceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string secret = 5;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  // uint64 accountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accountid());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }

  // uint64 deadline = 3;
  if (this->deadline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->deadline());
  }

  // uint64 blockHeight = 4;
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blockheight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitNonceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nodecom.SubmitNonceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNonceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNonceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nodecom.SubmitNonceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nodecom.SubmitNonceRequest)
    MergeFrom(*source);
  }
}

void SubmitNonceRequest::MergeFrom(const SubmitNonceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nodecom.SubmitNonceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
  if (from.deadline() != 0) {
    set_deadline(from.deadline());
  }
  if (from.blockheight() != 0) {
    set_blockheight(from.blockheight());
  }
}

void SubmitNonceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nodecom.SubmitNonceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNonceRequest::CopyFrom(const SubmitNonceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nodecom.SubmitNonceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNonceRequest::IsInitialized() const {
  return true;
}

void SubmitNonceRequest::Swap(SubmitNonceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNonceRequest::InternalSwap(SubmitNonceRequest* other) {
  using std::swap;
  secret_.Swap(&other->secret_);
  swap(accountid_, other->accountid_);
  swap(nonce_, other->nonce_);
  swap(deadline_, other->deadline_);
  swap(blockheight_, other->blockheight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmitNonceRequest::GetMetadata() const {
  protobuf_nodecom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nodecom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nodecom

// @@protoc_insertion_point(global_scope)
